name: Publish to MCP Registry

on:
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Perform a dry run (validate only, do not publish)'
        required: false
        type: boolean
        default: false
  release:
    types: [published]

# Required permissions for GitHub authentication
permissions:
  contents: read
  id-token: write

env:
  MCP_PUBLISHER_VERSION: 'latest'

jobs:
  publish-to-mcp-registry:
    name: Publish to MCP Registry
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5


      - id: install-jq
        name: Install jq
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Get version from pyproject.toml
        id: get_version
        run: |
          VERSION=$(grep -m 1 '^version = ' pyproject.toml | cut -d'"' -f2)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Publishing version: $VERSION"

      - name: Update server.json version
        run: |
          # Update version in server.json to match pyproject.toml
          jq --arg version "${{ steps.get_version.outputs.version }}" '.version = $version' server.json > server.json.tmp
          mv server.json.tmp server.json
          echo "Updated server.json to version ${{ steps.get_version.outputs.version }}"

      - name: Commit server.json version update
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

          # Check if there are changes
          if git diff --quiet server.json; then
            echo "No changes to server.json"
          else
            git add server.json
            git commit -m "chore: update server.json version to ${{ steps.get_version.outputs.version }}"
            git push
            echo "✅ Committed server.json version update"
          fi

      - name: Validate server.json
        run: |
          # Basic JSON validation
          jq empty server.json
          echo "✅ server.json is valid JSON"

          # Display configuration
          echo "Server configuration:"
          jq '.' server.json

      - id: install-mcp-publisher
        name: Install MCP Publisher
        shell: bash
        run: |
          # Install MCP Publisher
          # Resolve the latest release tag (e.g., v1.2.3)
          latest_tag=$(curl -s https://api.github.com/repos/modelcontextprotocol/registry/releases/latest | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
          # Strip the leading 'v' if present
          version=${latest_tag#v}
          # Construct platform-specific filename
          platform="$(uname -s | tr '[:upper:]' '[:lower:]')"
          arch="$(uname -m | sed 's/x86_64/amd64/;s/aarch64/arm64/')"
          filename="mcp-publisher_${version}_${platform}_${arch}.tar.gz"
          # Download and extract
          echo "Downloading installer $filename"
          curl -L "https://github.com/modelcontextprotocol/registry/releases/download/${latest_tag}/${filename}" | tar xz mcp-publisher
          # Move to /usr/local/bin
          sudo mv mcp-publisher /usr/local/bin/
          # Print installed version
          echo "MCP Publisher: `mcp-publisher --version`"
      
      - id: publish-mcp-registry
        name: Publish to MCP Registry
        shell: bash
        run: |
          # Publish to MCP Registry
          mcp-publisher --version
          mcp-publisher login github-oidc
          mcp-publisher publish
          mcp-publisher logout

      - id: show-mcp-registration
        name: Show MCP registration
        shell: bash
        if: always()
        run: |
          # Show last registered version
          curl -s -X GET "https://registry.modelcontextprotocol.io/v0/servers?search=schemacrawler-ai" \
            -H "accept: application/json" | \
          jq '.servers[] | select(._meta["io.modelcontextprotocol.registry/official"].isLatest == true) | {name: .server.name, version: .server.version, _meta}' > \
            output.json
          echo '```json' >> $GITHUB_STEP_SUMMARY
          cat output.json >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY