name: Release

on:
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type (major, minor, patch) or specific version (e.g., 1.2.3)'
        required: true
        type: string
        default: 'patch'
      docker_registry:
        description: 'Docker registry to push to'
        required: false
        type: choice
        options:
          - 'docker.io'
          - 'ghcr.io'
        default: 'docker.io'

env:
  PYTHON_VERSION: '3.13'
  POETRY_VERSION: '1.7.0'

jobs:
  bump-version:
    name: Bump Version
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.bump.outputs.new_version }}
      version_tag: ${{ steps.bump.outputs.version_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Get current version
        id: current
        run: |
          CURRENT_VERSION=$(poetry version -s)
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"

      - name: Bump version
        id: bump
        run: |
          INPUT="${{ github.event.inputs.version_bump }}"

          # Check if input is a specific version (matches semver pattern)
          if [[ $INPUT =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Setting specific version: $INPUT"
            poetry version $INPUT
          elif [[ $INPUT =~ ^(major|minor|patch)$ ]]; then
            echo "Bumping $INPUT version"
            poetry version $INPUT
          else
            echo "Invalid version bump type: $INPUT"
            echo "Must be 'major', 'minor', 'patch', or a specific version like '1.2.3'"
            exit 1
          fi

          NEW_VERSION=$(poetry version -s)
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "version_tag=v$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"

      - name: Commit version bump
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add pyproject.toml
          git commit -m "chore: bump version to ${{ steps.bump.outputs.new_version }}"

      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.ref }}

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: bump-version
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0

      - name: Pull latest changes
        run: git pull origin ${{ github.ref_name }}

      - name: Generate changelog
        id: changelog
        run: |
          # Get the previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")

          if [ -z "$PREVIOUS_TAG" ]; then
            echo "First release - including all commits"
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges)
          else
            echo "Generating changelog from $PREVIOUS_TAG to HEAD"
            CHANGELOG=$(git log $PREVIOUS_TAG..HEAD --pretty=format:"- %s (%h)" --no-merges)
          fi

          # Save changelog to file to handle multiline
          echo "$CHANGELOG" > changelog.txt
          echo "changelog_file=changelog.txt" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.bump-version.outputs.version_tag }}
          release_name: Release ${{ needs.bump-version.outputs.version_tag }}
          body_path: changelog.txt
          draft: false
          prerelease: false

  build-and-push-docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [bump-version, create-release]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Pull latest changes
        run: git pull origin ${{ github.ref_name }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        if: github.event.inputs.docker_registry == 'docker.io'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Log in to GitHub Container Registry
        if: github.event.inputs.docker_registry == 'ghcr.io'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ github.event.inputs.docker_registry == 'docker.io' && format('{0}/{1}', secrets.DOCKER_USERNAME, 'mcp-skills-server') || format('ghcr.io/{0}/mcp-skills-server', github.repository_owner) }}
          tags: |
            type=semver,pattern={{version}},value=${{ needs.bump-version.outputs.new_version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.bump-version.outputs.new_version }}
            type=semver,pattern={{major}},value=${{ needs.bump-version.outputs.new_version }}
            type=raw,value=latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ needs.bump-version.outputs.new_version }}

  test-release:
    name: Test Release
    runs-on: ubuntu-latest
    needs: [bump-version, build-and-push-docker]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.bump-version.outputs.version_tag }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Run tests
        run: poetry run pytest -v --cov

      - name: Verify version
        run: |
          VERSION=$(poetry version -s)
          if [ "$VERSION" != "${{ needs.bump-version.outputs.new_version }}" ]; then
            echo "Version mismatch! Expected ${{ needs.bump-version.outputs.new_version }}, got $VERSION"
            exit 1
          fi
          echo "Version verified: $VERSION"

      - name: Test Docker image (Docker Hub)
        if: github.event.inputs.docker_registry == 'docker.io'
        run: |
          docker pull ${{ secrets.DOCKER_USERNAME }}/mcp-skills-server:${{ needs.bump-version.outputs.new_version }}
          echo "Docker image pulled successfully"

      - name: Test Docker image (GHCR)
        if: github.event.inputs.docker_registry == 'ghcr.io'
        run: |
          docker pull ghcr.io/${{ github.repository_owner }}/mcp-skills-server:${{ needs.bump-version.outputs.new_version }}
          echo "Docker image pulled successfully"
